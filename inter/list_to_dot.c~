#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "generator_name.h"
//char* get_time();

//#include "dot_translator.h"

#ifndef NUM_OF_NODES
#define NUM_OF_NODES 50
#endif

FILE *f;

void print_head(void)
{
	f = fopen(get_time(), "w+");
	if (f == NULL) {
		perror("error open/create file");
		return;
	}

	fprintf(f, "%s", _dir());
	fprintf(f, "%s", sep[9]);
	fprintf(f, "%s", sep[0]);
	fprintf(f, "\n");

/*
char* _dir()
sep[9] // " "
sep[0] // "{"
...
sep[4] // ";"
...
char* _dir_con()
...
sep[1] // "}"
*/
}

void print_end(void)
{
	fprintf(f, "\n");
	fprintf(f, "%s", sep[1]);

	fclose(f);
}

int len_num_of_nodes(void)
{
	int kol = 0;
	int num = NUM_OF_NODES;
	if (num/10 == 0)
		return 1;
	else
	{
		while (num > 0) 
		{
			num = num/10;
			kol += 1;
		}
		return kol;
	}
}

//нужно создать имена соответствующие каждой вершине
void gen_vertex()
{
//имя вершины будет состоять из vertex и цифр в зависимости от количества
//вершин
/*
	char arr[] = {'q', 'w', 'e', 'r', 't', 'y', 'u', 
		       'i', 'o', 'p', 'a', 's', 'd', 'f', 
		       'g', 'h', 'j', 'k', 'l', 'z', 'x', 
		       'c', 'v', 'b', 'n', 'm'};
	size_t len_arr = sizeof(arr) / sizeof(char);

//	int temp = arr[0 + rand() %len_arr];
*/

	//длина имени одной вершины, 6 - vertex
	int vertex_name_len = 6 + len_num_of_nodes();

	char* v_name;
	v_name = malloc(vertex_name_len * sizeof(char));

	v_name = strcat(v_name, "vertex");

	//здесь будут храниться все имена
	char* graph = NULL;
	graph = malloc(vertex_name_len * NUM_OF_NODES * sizeof(char));
	char* gr = NULL;
	char* num = NULL;
//	num = malloc(4*sizeof(char));
	num = malloc(len_num_of_nodes() * sizeof(char));
	for (int i = 0; i < NUM_OF_NODES; ++i) {
//		gr = graph + i * vertex_name_len * sizeof(char);

		itoa(i, num);
		char* temp_name;
		temp_name = malloc(10 * sizeof(char));
		temp_name = v_name;

		temp_name = strcat(temp_name, num);
//		gr = strcat(gr, temp_name);
		graph = strcat(graph, temp_name);

//		free(temp_name);
//		temp_name = NULL;

//		gr = NULL;
	}
	printf ("\n");
/*
	for (int i = 0; i < NUM_OF_NODES; ++i ) {
		gr


	}
*/
	printf ("%s", gr);
	printf ("\n");

/*
	printf("%c\n", temp);

	itoa(temp, word);
//	word = strcat(word, ch);

	char* ch;
	ch = malloc(2*sizeof(char));
	temp = arr[0 + rand() %len_arr];
	itoa(temp, ch);
	word = strcat(word, ch);

	printf("%c\n", temp);
*/
//	word = strcat(word, temp);
//	word = strcat(word, arr[0 + rand() %len_arr]);

}


int main(int argc, char** argv)
{
//	print_head();
	gen_vertex();

	return 0;
}


//digraph{

	//connections

//	var1 -> oper1;
//	var1 ->	oper2;
//	var2 -> var12 -> oper4 -> var124 -> oper7;
//	var3 -> oper2;
//	var4 -> oper2;
//	var5 -> oper2 -> var345 -> oper5;
//	var6 -> oper4;
//	var7 -> oper3 -> var73 -> oper5 -> var34573 -> oper6;
//	var8 -> oper6 -> var348 -> oper7 -> var3486 -> oper8 -> var_result;

/*
	var1 -> oper1;
	var2 -> oper1;
	var12 -> oper4;
	var124 -> oper7;
	var3 -> oper2;
	var4 -> oper2;
	var5 -> oper2; 
	var345 -> oper5;
	var6 -> oper4;
	var7 -> oper3;
	var73 -> oper5;
	var34573 -> oper6;
	var8 -> oper6;
	var348 -> oper7;
	var3486 -> oper8;

	oper2 -> var345;
	oper3 -> var73;
	oper5 -> var34573;
	oper6 -> var348;
	oper4 -> var124;
	oper7 -> var3486;
	oper1 -> var12;
	oper8 -> var_result;
*/
//      }
